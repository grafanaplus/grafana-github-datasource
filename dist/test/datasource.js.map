{"version":3,"sources":["../../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;IAAY,U;;;;;;;;IAEC,gB,WAAA,gB;AAET,8BAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;AAAA;;AAC1C,aAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,aAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,aAAK,IAAL,GAAY,iBAAiB,IAA7B;;AAEA,aAAK,CAAL,GAAS,EAAT;AACA,aAAK,UAAL,GAAkB,UAAlB;AACH;;;;8BAEK,O,EAAS;AAAA;;AACX,gBAAI,OAAO,QAAQ,IAAR,CAAa,OAAb,CAAX;AACA,gBAAI,QAAQ,KAAK,oBAAL,CAA0B,IAA1B,CAAZ;;AAEA,gBAAI,MAAM,OAAN,CAAc,MAAd,IAAwB,CAA5B,EAA+B;AAC3B,uBAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAP;AACH;;AAED,mBAAO,KAAK,CAAL,CAAO,GAAP,CAAW,iBAAE,GAAF,CAAM,MAAM,OAAZ,EAAqB,kBAAU;AAC7C,uBAAO,MAAK,WAAL,CAAiB,MAAjB,CAAP;AACH,aAFiB,CAAX,EAEH,IAFG,CAEE,mBAAW;AAChB,uBAAO,EAAC,QAAQ,OAAT,EAAP;AACH,aAJM,CAAP,CAIG;AAEN;;;yCAEgB;AACb,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,qBAAK,KAAK,GAD2B;AAErC,wBAAQ;AAF6B,aAAlC,EAGJ,IAHI,CAGC,oBAAY;AAChB,oBAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AACzB,2BAAO,EAAE,QAAQ,SAAV,EAAqB,SAAS,wBAA9B,EAAwD,OAAO,SAA/D,EAAP;AACH;AACJ,aAPM,CAAP;AAQH;;;iCAEQ,Q,EAAU;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,qBAAK,KAAK,GAAL,GAAW,SAAX,GAAuB,QADS;AAErC,wBAAQ;AAF6B,aAAlC,CAAP;AAIH;;;wCAEe,O,EAAS;AACrB,gBAAG,QAAQ,KAAR,KAAkB,MAArB,EAA4B;AACxB,uBAAO,KAAK,QAAL,CAAc,QAAQ,MAAtB,CAAP;AACH,aAFD,MAEM,IAAG,QAAQ,KAAR,KAAkB,QAArB,EAA8B;AAChC,oBAAG,QAAQ,MAAR,CAAe,IAAf,IAAuB,QAAQ,MAAR,CAAe,IAAzC,EAA8C;AAC1C,2BAAO,KAAK,CAAL,CAAO,IAAP,CAAY,CACf,EAAC,QAAQ,cAAT,EADe,CAAZ,CAAP;AAGH;AACJ;;AAED,mBAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAP;AACH;;;6CAEoB,O,EAAS;;AAE1B,oBAAQ,OAAR,GAAkB,iBAAE,MAAF,CAAS,QAAQ,OAAjB,EAA0B,kBAAU;AAClD,uBAAO,OAAO,MAAd;AACH,aAFiB,CAAlB;;AAIA,mBAAO,OAAP;AACH;;;oCAEW,I,EAAM;AACd,gBAAG,SAAS,cAAZ,EAA2B;AACvB,uBAAO,MAAP;AACH,aAFD,MAEK;AACD,uBAAO,OAAP;AACH;AACJ;;;iCAEQ,M,EAAQ;AACb,gBAAI,YAAY,KAAK,WAAL,CAAiB,OAAO,SAAxB,CAAhB;AACA,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,qBAAK,KAAK,GAAL,GAAW,GAAX,GAAiB,SAAjB,GAA6B,GAA7B,GAAmC,OAAO,IAA1C,GAAiD,QADjB;AAErC,wBAAQ,EAAC,YAAY,GAAb,EAF6B;AAGrC,wBAAQ;AAH6B,aAAlC,EAIJ,IAJI,CAIC,UAAS,IAAT,EAAc;AAClB,uBAAO,iBAAE,GAAF,CAAM,KAAK,IAAX,EAAiB,UAAS,CAAT,EAAY,CAAZ,EAAc;AAClC,2BAAO,EAAC,QAAQ,EAAE,IAAX,EAAiB,SAAS,EAAE,IAA5B,EAAP;AACH,iBAFM,CAAP;AAGH,aARM,EAQJ,UAAS,IAAT,EAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,EAAqB;AACpB,wBAAQ,KAAR,CAAc,IAAd,EAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB;AACH,aAVM,CAAP;AAWH;;;oCAEW,M,EAAQ;AAChB,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,qBAAK,KAAK,GAAL,GAAW,SAAX,GAAuB,OAAO,IAA9B,GAAqC,GAArC,GAA2C,OAAO,IAAlD,GAAyD,WADzB;AAErC,wBAAQ,EAAC,YAAY,GAAb,EAF6B;AAGrC,wBAAQ;AAH6B,aAAlC,CAAP;AAKH;;;qCAEY,M,EAAQ,G,EAAK;AACtB,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,qBAAK,KAAK,GAAL,GAAW,SAAX,GAAuB,OAAO,IAA9B,GAAqC,GAArC,GAA2C,OAAO,IAAlD,GAAyD,WAAzD,GAAuE,GAAvE,GAA6E,SAD7C;AAErC,wBAAQ,EAAC,YAAY,GAAb,EAF6B;AAGrC,wBAAQ;AAH6B,aAAlC,CAAP;AAKH;;;oCAEW,M,EAAQ;AAAA;;AAChB,gBAAI,OAAO,IAAX;AACA,gBAAG,OAAO,MAAP,KAAkB,cAArB,EAAoC;AAAA;AAChC,wBAAI,QAAQ,IAAI,WAAW,OAAf,EAAZ;AACA,0BAAM,OAAN,GAAgB,CACZ,EAAC,QAAQ,QAAT,EADY,EAEZ,EAAC,QAAQ,QAAT,EAAmB,QAAQ,IAA3B,EAFY,CAAhB;AAIA,wBAAI,OAAO,EAAX;;AAEA;AAAA,2BAAO,OAAK,WAAL,CAAiB,MAAjB,EAAyB,IAAzB,CAA8B,gBAAQ;AACzC,mCAAO,KAAK,CAAL,CAAO,GAAP,CAAW,iBAAE,GAAF,CAAM,KAAK,IAAX,EAAiB,kBAAU;AACzC,oCAAI,MAAM,EAAC,QAAQ,OAAO,IAAhB,EAAsB,UAAU,CAAC,CAAjC,EAAV;AACA,qCAAK,IAAL,CAAU,GAAV;AACA,uCAAO,KAAK,YAAL,CAAkB,MAAlB,EAA0B,OAAO,IAAjC,EAAuC,IAAvC,CAA4C,gBAAQ;AACvD,wCAAI,aAAa;AACb,mDAAW,CADE;AAEb,mDAAW,CAFE;AAGb,mDAAW,CAAC;AAHC,qCAAjB;AAKA,wCAAI,MAAJ,GAAa,WAAW,KAAK,IAAL,CAAU,KAArB,CAAb;AACH,iCAPM,CAAP;AAQH,6BAXiB,CAAX,CAAP;AAYH,yBAbM,EAaJ,IAbI,CAaC,YAAU;AAAC;AACf,6CAAE,OAAF,CAAU,IAAV,EAAgB,eAAO;AACnB,sCAAM,IAAN,CAAW,IAAX,CAAgB,CAAC,IAAI,IAAL,EAAW,IAAI,MAAf,CAAhB;AACH,6BAFD;AAGA,mCAAO,KAAP;AACH,yBAlBM;AAAP;AARgC;;AAAA;AA2BnC;AACD,mBAAO,EAAP;AACH","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport * as TableModel from 'app/core/table_model';\n\nexport class GithubDatasource {\n\n    constructor(instanceSettings, $q, backendSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n\n        this.q = $q;\n        this.backendSrv = backendSrv;\n    }\n\n    query(options) {\n        let opts = angular.copy(options);\n        let query = this.buildQueryParameters(opts);\n\n        if (query.targets.length <= 0) {\n            return this.q.when([]);\n        }\n\n        return this.q.all(_.map(query.targets, target => {\n            return this.buildSeries(target);\n        })).then(results => {\n            return {'data': results} \n        });;\n\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url,\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    findUser(user_str) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/users/' + user_str,\n            method: 'GET'\n        })\n    }\n\n    metricFindQuery(options) {\n        if(options.query === 'repo'){\n            return this.getRepos(options.target);\n        }else if(options.query === 'metric'){\n            if(options.target.user && options.target.repo){\n                return this.q.when([\n                    {'text': 'BranchStatus'}\n                ]);\n            }\n        }\n\n        return this.q.when([]);\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.metric;\n        });\n\n        return options;\n    }\n\n    getUserType(type) {\n        if(type === 'Organization'){\n            return 'orgs';\n        }else{\n            return 'users';\n        }\n    }\n\n    getRepos(target) {\n        let user_type = this.getUserType(target.user_type);\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/' + user_type + '/' + target.user + '/repos',\n            params: {'per_page': 100},\n            method: 'GET'\n        }).then(function(resp){\n            return _.map(resp.data, function(v, i){\n                return {'text': v.name, 'value': v.name}\n            });\n        }, function(resp, a,b,c){\n            console.error(resp, a,b,c)\n        });\n    }\n\n    getBranches(target) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/repos/' + target.user + '/' + target.repo + '/branches',\n            params: {'per_page': 100},\n            method: 'GET'\n        });\n    }\n\n    getRefStatus(target, ref) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/repos/' + target.user + '/' + target.repo + '/commits/' + ref + '/status',\n            params: {'per_page': 100},\n            method: 'GET'\n        });\n    }\n\n    buildSeries(target) {\n        let self = this;\n        if(target.metric === 'BranchStatus'){\n            let table = new TableModel.default();\n            table.columns = [\n                {'text': 'Branch'},\n                {'text': 'Status', 'sort': true}\n            ];\n            let rows = [];\n\n            return this.getBranches(target).then(resp => {\n                return self.q.all(_.map(resp.data, branch => {\n                    let row = {'name': branch.name, 'status': -1}\n                    rows.push(row);\n                    return self.getRefStatus(target, branch.name).then(resp => {\n                        let status_map = {\n                            'success': 1,\n                            'pending': 0,\n                            'failure': -1\n                        };\n                        row.status = status_map[resp.data.state];\n                    });\n                }));\n            }).then(function(){;\n                _.forEach(rows, row => {\n                    table.rows.push([row.name, row.status]);\n                });\n                return table;\n            });\n        }\n        return [];\n    }\n}\n"]}