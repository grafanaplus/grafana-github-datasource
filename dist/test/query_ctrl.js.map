{"version":3,"sources":["../../src/query_ctrl.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;IAEa,yB,WAAA,yB;;;AAET,uCAAY,MAAZ,EAAoB,SAApB,EAA+B,YAA/B,EAA6C,EAA7C,EAAkD;AAAA;;AAAA,iHACxC,MADwC,EAChC,SADgC;;AAG9C,cAAK,KAAL,GAAa,MAAb;AACA,cAAK,CAAL,GAAS,EAAT;AACA,cAAK,YAAL,GAAoB,YAApB;;AAEA,cAAK,MAAL,CAAY,SAAZ,GAAwB,MAAK,MAAL,CAAY,SAAZ,IAAyB,MAAjD;AACA,cAAK,MAAL,CAAY,IAAZ,GAAmB,MAAK,MAAL,CAAY,IAAZ,IAAoB,EAAvC;AACA,cAAK,MAAL,CAAY,IAAZ,GAAmB,MAAK,MAAL,CAAY,IAAZ,IAAoB,EAAvC;AACA,cAAK,MAAL,CAAY,MAAZ,GAAqB,MAAK,MAAL,CAAY,MAAZ,IAAsB,EAA3C;;AAEA,cAAK,WAAL,GAAmB,aAAa,kBAAb,CAAgC,MAAK,MAAL,CAAY,IAA5C,EAAkD,mBAAlD,CAAnB;AACA,cAAK,aAAL,GAAqB,aAAa,kBAAb,CAAgC,MAAK,MAAL,CAAY,MAA5C,EAAoD,eAApD,CAArB;AAb8C;AAcjD;;;;mCAEU;AAAA;;AACP,gBAAG,KAAK,MAAL,CAAY,IAAf,EAAoB;AAChB,qBAAK,UAAL,CAAgB,QAAhB,CAAyB,KAAK,MAAL,CAAY,IAArC,EAA2C,IAA3C,CAAgD,gBAAQ;AACpD,wBAAI,OAAO,KAAK,IAAhB;AACA,2BAAK,MAAL,CAAY,IAAZ,GAAmB,KAAK,KAAxB;AACA,2BAAK,MAAL,CAAY,SAAZ,GAAwB,KAAK,IAA7B;AACH,iBAJD;AAKH;AACJ;;;sCAEa;AACV,mBAAO,CACP,EAAC,OAAO,MAAR,EAAgB,MAAM,MAAtB,EADO,EAEP,EAAC,OAAO,KAAR,EAAe,MAAM,cAArB,EAFO,CAAP;AAIH;;;mCAEU;AACP,mBAAO,KAAK,UAAL,CAAgB,eAAhB,CAAgC,EAAC,SAAS,MAAV,EAAkB,UAAU,KAAK,MAAjC,EAAhC,EACF,IADE,CACG,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADH,CAAP;AAEH;;;4CAEmB;AAChB,mBAAO,KAAK,UAAL,CAAgB,eAAhB,CAAgC,EAAC,SAAS,QAAV,EAAoB,UAAU,KAAK,MAAnC,EAAhC,EACF,IADE,CACG,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADH,CAAP;AAEH;;;sCAEa;AACV,iBAAK,MAAL,CAAY,IAAZ,GAAmB,KAAK,WAAL,CAAiB,KAApC;AACA,iBAAK,SAAL,CAAe,OAAf,G;AACH;;;+CAEsB;AACnB,iBAAK,MAAL,CAAY,MAAZ,GAAqB,KAAK,aAAL,CAAmB,KAAxC;AACA,iBAAK,SAAL,CAAe,OAAf,G;AACH;;;;;;AAGL,0BAA0B,WAA1B,GAAwC,4BAAxC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GithubDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, uiSegmentSrv, $q)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.q = $q;\n        this.uiSegmentSrv = uiSegmentSrv;\n\n        this.target.user_type = this.target.user_type || 'User';\n        this.target.user = this.target.user || '';\n        this.target.repo = this.target.repo || '';\n        this.target.metric = this.target.metric || '';\n\n        this.repoSegment = uiSegmentSrv.getSegmentForValue(this.target.repo, 'select repository');\n        this.metricSegment = uiSegmentSrv.getSegmentForValue(this.target.metric, 'select metric');\n    }\n\n    findUser() {\n        if(this.target.user){\n            this.datasource.findUser(this.target.user).then(resp => {\n                let user = resp.data;\n                this.target.user = user.login;\n                this.target.user_type = user.type;\n            });\n        }\n    }\n\n    getUserType() {\n        return [\n        {value: 'user', text: 'User'},\n        {value: 'org', text: 'Organization'}\n        ]\n    }\n\n    getRepos() {\n        return this.datasource.metricFindQuery({'query': 'repo', 'target': this.target})\n            .then(this.uiSegmentSrv.transformToSegments(false));\n    }\n\n    getMetricSegments() {\n        return this.datasource.metricFindQuery({'query': 'metric', 'target': this.target})\n            .then(this.uiSegmentSrv.transformToSegments(false));\n    }\n\n    repoChanged() {\n        this.target.repo = this.repoSegment.value;\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n\n    metricSegmentChanged() {\n        this.target.metric = this.metricSegment.value;\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n\nGithubDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}