{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport * as TableModel from 'app/core/table_model';\n\nexport class GithubDatasource {\n\n    constructor(instanceSettings, $q, backendSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n\n        this.q = $q;\n        this.backendSrv = backendSrv;\n    }\n\n    query(options) {\n        let opts = angular.copy(options);\n        let query = this.buildQueryParameters(opts);\n\n        if (query.targets.length <= 0) {\n            return this.q.when([]);\n        }\n\n        return this.q.all(_.map(query.targets, target => {\n            return this.buildSeries(target);\n        })).then(results => {\n            return {'data': results} \n        });;\n\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url,\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    findUser(user_str) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/users/' + user_str,\n            method: 'GET'\n        })\n    }\n\n    metricFindQuery(options) {\n        if(options.query === 'repo'){\n            return this.getRepos(options.target);\n        }else if(options.query === 'metric'){\n            if(options.target.user && options.target.repo){\n                return this.q.when([\n                    {'text': 'BranchStatus'}\n                ]);\n            }\n        }\n\n        return this.q.when([]);\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.metric;\n        });\n\n        return options;\n    }\n\n    getUserType(type) {\n        if(type === 'Organization'){\n            return 'orgs';\n        }else{\n            return 'users';\n        }\n    }\n\n    getRepos(target) {\n        let user_type = this.getUserType(target.user_type);\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/' + user_type + '/' + target.user + '/repos',\n            params: {'per_page': 100},\n            method: 'GET'\n        }).then(function(resp){\n            return _.map(resp.data, function(v, i){\n                return {'text': v.name, 'value': v.name}\n            });\n        }, function(resp, a,b,c){\n            console.error(resp, a,b,c)\n        });\n    }\n\n    getBranches(target) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/repos/' + target.user + '/' + target.repo + '/branches',\n            params: {'per_page': 100},\n            method: 'GET'\n        });\n    }\n\n    getRefStatus(target, ref) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/repos/' + target.user + '/' + target.repo + '/commits/' + ref + '/status',\n            params: {'per_page': 100},\n            method: 'GET'\n        });\n    }\n\n    buildSeries(target) {\n        let self = this;\n        if(target.metric === 'BranchStatus'){\n            let table = new TableModel.default();\n            table.columns = [\n                {'text': 'Branch'},\n                {'text': 'Status', 'sort': true}\n            ];\n            let rows = [];\n\n            return this.getBranches(target).then(resp => {\n                return self.q.all(_.map(resp.data, branch => {\n                    let row = {'name': branch.name, 'status': -1}\n                    rows.push(row);\n                    return self.getRefStatus(target, branch.name).then(resp => {\n                        let status_map = {\n                            'success': 1,\n                            'pending': 0,\n                            'failure': -1\n                        };\n                        row.status = status_map[resp.data.state];\n                    });\n                }));\n            }).then(function(){;\n                _.forEach(rows, row => {\n                    table.rows.push([row.name, row.status]);\n                });\n                return table;\n            });\n        }\n        return [];\n    }\n}\n"]}